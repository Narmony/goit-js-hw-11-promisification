{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAUMA,EAAQ,SAAAC,GAMV,OALgB,IAAIC,SAAQ,SAACC,EAASC,GAClCC,YAAW,WACPF,EAAQF,KACTA,OAKLK,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,G,kCClBXK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAcnBC,EAAkB,SAACC,EAAUC,GAE/B,OAAO,IAAId,SAAQ,SAACC,GAGbA,EAFkBY,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAOnEZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAW7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GCzCnC,IAkBMe,EAAkB,SAACC,GACvB,IAnBiCC,EAAKC,EAmBhCxB,GAnB2BuB,EAmBO,IAnBFC,EAmBO,IAlBtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAmBlD,OAAO,IAAIrB,SAAQ,SAACC,EAASC,GAExBC,YAAW,WACGoB,KAAKE,SAAW,GAG/BxB,EAAQ,CAACmB,EAAYM,GAAI5B,IAEvBI,EAAOkB,EAAYM,MAExB5B,OAKC6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVrB,EAAU,KACjCC,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CrB,EAA9C,OAGIuB,EAAW,SAAAF,GACfpB,QAAQuB,KAAR,gCAA6CH,EAA7C,8BAaFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAC/BtB,KAAKmB,GACLI,MAAMH,GAETT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAC/BtB,KAAKmB,GACLI,MAAMH,K","file":"main.9aece7fe9c3d5760c9fb.js","sourcesContent":["// Задание 1\n// Напиши функцию delay(ms), которая возвращает промис,\n//     переходящий в состояние \"resolved\" через ms миллисекунд.\n// Значением исполнившегося промиса должно быть то кол - во\n// миллисекунд которое передали во время вызова функции delay.\n\n\n// const delay = ms => {\n//   // Твой код\n\nconst delay = ms => {\n    const promise = new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(ms);\n        }, ms);\n    });\n    return promise;\n}\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// // Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","// Задание 2\n// Перепиши функцию toggleUserState() так, чтобы она\n// не использовала callback - функцию callback,\n//     а принимала всего два параметра allUsers\n// и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\n// const toggleUserState = (allUsers, userName, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === userName ? { ...user, active: !user.active } : user,\n//   );\n\n//   callback(updatedUsers);\n  \n// };\n\n\n\nconst toggleUserState = (allUsers, userName) => {\n \n    return new Promise((resolve)=> { \n        const updatedUsers = allUsers.map(user =>\n            user.name === userName ? { ...user, active: !user.active } : user,\n        ); resolve(updatedUsers)\n\n  });\n};\n\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, 'Mango', logger);\n// toggleUserState(users, 'Lux', logger);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","// Задание 3\n// Перепиши функцию makeTransaction() так,\n//     чтобы она не использовала callback - функции\n// onSuccess и onError, а принимала\n// всего один параметр transaction и возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\nconst makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n    return new Promise((resolve, reject) => {\n        // const delay = randomIntegerFromInterval(200, 500);\n         setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n        resolve([transaction.id, delay]) ;\n    } \n    else{ reject(transaction.id);}\n    \n  }, delay);\n    })\n \n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}